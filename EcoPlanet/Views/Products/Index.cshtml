@{
    int counter = 1; // Start the counter at 1
}

@model ProductsViewModel

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <style>
        header {
            position: fixed;
            width: 100%;
            z-index: 1000;
        }
        .header-container {
            display: flex;
            justify-content: space-between; /* Aligns children to opposite ends */
            align-items: center; /* Centers children vertically */
            margin-bottom: 20px; /* Adds some space below the header */
        }

        h1 {
            margin: 0; /* Removes default margin to align properly with the button */
            flex-grow: 1; /* Allows the title to grow and push the button to the right */
        }

        .table-container {
            margin: 0 auto;
            overflow-x: auto;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
        }

        th {
            background-color: #f8f9fa;
            color: #333;
            text-align: center;
            padding: 10px;
            font-size: 16px;
            border-bottom: 1px solid #dee2e6;
        }

        td {
            padding: 10px;
            font-size: 14px;
            border-bottom: 1px solid #dee2e6;
            text-align: center;
        }

        .action-buttons {
            justify-content: center;
            align-items: center;
            gap: 10px;
            margin: 0;
        }

        .action-button {
            display: inline-flex;
            justify-content: center;
            align-items: center;
            margin: 0;
            padding: 8px 16px; /* Providing a bit more horizontal padding for aesthetics */
            border-radius: 4px;
            color: #fff;
            text-align: center;
            text-decoration: none;
            cursor: pointer;
            flex: 0 0 auto; /* Do not allow the buttons to grow or shrink */
        }

        .action-button:hover {
            color: white;
        }

        /* Styling for Add button */
        .add {
            background-color: #17a2b8;
        }

        .add:hover, .add:focus {
            background-color: #138496;
        }

        /* Styling for Edit button */
        .edit {
            background-color: #ffc107;
        }

        .edit:hover, .edit:focus {
            background-color: #e0a800;
        }

        /* Styling for Delete button */
        .delete {
            background-color: #dc3545;
        }

        .delete:hover, .delete:focus {
            background-color: #c82333;
        }

        .search-container {
            display: flex;
            justify-content: center; /* Center the search box horizontally */
            width: 100%;
            padding: 10px 0;
        }

        #searchProductsInput {
            width: 300px; /* Adjust the width as necessary */
            padding: 10px;
            margin: 10px 0; /* Adjust the margins if necessary */
            border: 1px solid #ccc;
            border-radius: 4px;
        }
    </style>
</head>
<br>
<br></br></br>
<div class="header-container">
    <h1>Products Information</h1>
    <a asp-action="AddProducts" class="action-button add">Add New Products</a>
</div>

<hr />
<div class="search-container">
    <input type="text" id="searchProductsInput" onkeyup="searchProducts()" placeholder="Search for products..." title="Type in a product detail">
</div>

<div class="table-container">
    <table id="ProductsTable">
        <thead>
            <tr>
                <th> No.</th>
                <th> Category</th>
                <th> Name</th>
                <th> Price</th>
                <th> Quantity</th>
                <th> Status</th>
                <th> Expiry Date</th>
                <th> Image</th>
                <th>Created/Updated At</th>
                <th>Actions</th>
            </tr>
        </thead>

        <tbody>
            @foreach (var item in Model.ProductsList)
            {
                <tr>
                    <td>@counter</td>
                    <td>@item.productsType</td>
                    <td>@item.productsName</td>
                    <td>@item.productsPrice</td>
                    <td>@item.productsQuantity</td>
                    <td>@item.productsStatus</td>
                    <td>@(item.expiryDate?.ToShortDateString() ?? "N/A")</td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.productsImage))
                        {
                            var image = Model.ImageList.FirstOrDefault(i => i.Key.Trim() == item.productsImage.Trim());


                            if (image != null)
                            {
                                string imageURL = "https://" + image.BucketName + ".s3.amazonaws.com/" + image.Key;
                                <img src="@imageURL" width="100" height="100" />
                            }
                            else
                            {
                                <span>No Image Found for Key: @item.productsImage</span>
                            }
                        }
                        else
                        {
                            <span>No Image Provided</span>
                        }
                    </td>
                    <td>@item.createdAt</td>
                    <td class="action-buttons">
                        <a href="@Url.Action("EditProducts", "Products", new { productsId = item.productsId })" class="action-button edit">Edit</a>
                        <a href="@Url.Action("DeleteProducts", "Products", new { productsId = item.productsId })" class="action-button delete">Delete</a>
                    </td>
                </tr>
                counter++;
            }
        </tbody>
    </table>
</div>
</html>

<script>
    function searchProducts() {
        // Declare variables
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("searchProductsInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("ProductsTable"); // Ensure your table has this ID
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 1; i < tr.length; i++) { // Start from 1 to skip the header row
            tr[i].style.display = "none"; // Start by hiding all rows
            td = tr[i].getElementsByTagName("td");
            for (var j = 0; j < td.length; j++) {
                if (td[j]) {
                    txtValue = td[j].textContent || td[j].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = ""; // Show the row if there's a match
                        break;
                    }
                }
            }
        }
    }
</script>