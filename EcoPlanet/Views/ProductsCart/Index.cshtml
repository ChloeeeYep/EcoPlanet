@model EcoPlanet.ViewModels.ProductsCartViewModel;
@using Microsoft.AspNetCore.Identity
@using EcoPlanet.Areas.Identity.Data

@inject SignInManager<EcoPlanetUser> SignInManager
@inject UserManager<EcoPlanetUser> UserManager


@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
    int counter = 1; // Start the counter at 1
    var total = Model.ProductsCart.Items.Sum(i => i.productsPrice * i.productsQuantity);
    var shipping = 10;
    var totalAmount = total + shipping;
    var user = await UserManager.GetUserAsync(User);
    string currentUserId = user.Email;
    string phone = user.PhoneNumber;
    string address = user.Address;
}

<div class="container mt-5">
    <div class="row">
        <!-- Notification Area -->
        @if (TempData["RemovedItems"] != null)
        {
            <div class="alert alert-warning" role="alert">
                @Html.Raw(TempData["RemovedItems"].ToString())
            </div>
        }
        @if (TempData["QuantityAdjusted"] != null)
        {
            <div class="alert alert-warning" role="alert">
                @Html.Raw(TempData["QuantityAdjusted"].ToString())
            </div>
        }

        <!-- Checkout form and Shipping Information -->
        <div class="col-md-7">
            <h2>Checkout</h2>
            <form asp-controller="ProductsCart" asp-action="ProcessCheckout" method="post">
                <h4>Contact Information</h4>
                <div class="form-group">
                    <label for="email">Email <span style="color:red">*</span></label>
                    <input type="email" id="Email" name="Email" class="form-control" value="@currentUserId" required>
                </div>
                <div class="form-group">
                    <label for="phone">Phone Number <span style="color:red">*</span></label>
                    <input type="tel" id="phone" name="PhoneNumber" class="form-control" value="@phone" 
                        pattern="\d{3}-?\d{7,8}" title="Phone number must be 10 or 11 digits and formatted as XXX-XXXXXXX or XXX-XXXXXXXX." required>
                </div>
                <br />
                <h4>Shipping Address</h4>
                <div class="form-row">
                    <div class="form-group col-md-6">
                        <textarea name="Address" required>@address</textarea>
                    </div>
                </div>
                <br />

                <h4>Payment</h4>
                <div class="payment-info">
                    <div class="form-group">
                        <label for="cardHolderName">Card Holder Name <span style="color:red">*</span></label>
                        <input type="text" id="CardHolderName" name="CardHolderName" class="form-control"
                               pattern="[A-Za-z\s]{5,}" title="Card holder name must contain more than 5 alphabetic characters and spaces only." required>
                    </div>
                    <div class="form-group">
                        <label for="cardNumber">Card Number <span style="color:red">*</span></label>
                        <input type="text" id="CardNumber" name="CardNumber" class="form-control"
                               pattern="\d{16}" title="Card number must be a 16-digit number." maxlength="16" required>
                    </div>
                    <div class="form-row">
                        <div class="form-group col-md-6">
                            <label for="expiryDate">Expiry Date <span style="color:red">*</span></label>
                            <input type="text" id="ExpiryDate" name="ExpiryDate" class="form-control" placeholder="MM/YY" 
                                pattern="\d{2}/\d{2}" title="Expiry date must be formatted as MM/YY." required>
                        </div>
                        <div class="form-group col-md-6">
                            <label for="cvv">CVV <span style="color:red">*</span></label>
                            <input type="text" id="CVV" name="CVV" class="form-control"
                                   pattern="\d{3}" title="CVV must be a 3-digit number." maxlength="3" required>
                        </div>
                    </div>
                </div>

                <button type="submit" class="btn btn-primary">Confirm Checkout</button>
            </form>
        </div>

        <!-- Order Summary and Cart Items -->
        <div class="col-md-5">
            <div class="order-summary">
                <h3>Order Summary</h3>
                <table class="table">
                    <tbody>
                        <tr>
                            <td>Subtotal</td>
                            <td><span class="subtotal-amount">RM @total</span></td>
                        </tr>
                        <tr>
                            <td>Shipping</td>
                            <td><span class="shipping-amount">RM @shipping</span></td>
                        </tr>
                        <tr>
                            <td><strong>Total</strong></td>
                            <td><strong><span class="grand-total-amount"><strong>RM @totalAmount</span></strong></td>
                        </tr>
                    </tbody>
                </table>

                <div class="bag-summary-actions">
                    <h4>Bag Summary <span class="badge">@Model.ProductsCart.Items.Count</span></h4>
                    <a href="@Url.Action("BrowseProducts", "Products")" class="btn btn-info">Continue Shopping</a>
                </div>

                <!-- Bag items listing -->
                <div class="bag-summary">
                    @foreach (var item in Model.ProductsCart.Items)
                    {
                        <div class="bag-item" data-item-id="@item.productsId">
                            <img src="@Model.ImageUrls[item.productsImage.Trim()]" class="bag-item-image" alt="@item.productsName">
                            <div class="bag-item-details">
                                <div class="bag-item-name">@item.productsName</div>
                                <div class="bag-item-price">RM <span class="productsPrice">@item.productsPrice</span></div>
                                <!-- Quantity form for each item -->
                                <form asp-controller="ProductsCart" asp-action="UpdateQuantity" method="post" onchange="this.submit();">
                                    <input type="hidden" name="productsCartItemId" value="@item.productsCartItemId" />
                                    <input type="number" name="quantity" class="quantity-input"
                                           value="@item.productsQuantity" min="1"
                                           data-max-quantity="@Model.MaxQuantities[item.productsId]"
                                           data-item-id="@item.productsId" />
                                    <input type="submit" value="Update" style="display: none;" />
                                    @Html.AntiForgeryToken()
                                </form>
                                <div>Total: RM <span class="item-total">@item.productsPrice * @item.productsQuantity</span></div>
                                <form asp-controller="ProductsCart" asp-action="RemoveFromCart" method="post">
                                    <input type="hidden" name="productsCartItemId" value="@item.productsCartItemId" />
                                        <button type="submit" class="btn-remove-item icon-button" title="Remove item">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    @Html.AntiForgeryToken()
                                </form>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            function updateTotals() {
                let subtotal = 0;

                document.querySelectorAll('.bag-item').forEach(function (item) {
                    const input = item.querySelector('.quantity-input');
                    const maxQuantity = parseInt(input.getAttribute('data-max-quantity'), 10);
                    let quantity = parseInt(input.value, 10);

                    // Ensure the quantity does not exceed the maximum
                    if (quantity > maxQuantity) {
                        quantity = maxQuantity;
                        input.value = maxQuantity; // Reset the value in the input box
                    }

                    const price = parseFloat(item.querySelector('.productsPrice').textContent.replace('RM ', ''));
                    const total = quantity * price;
                    item.querySelector('.item-total').textContent = 'RM ' + total.toFixed(2);
                    subtotal += total;
                });

                // Update the subtotal in the summary
                document.querySelector('.subtotal-amount').textContent = 'RM ' + subtotal.toFixed(2);

                // Update the grand total in the summary
                const shippingCost = parseFloat(document.querySelector('.shipping-amount').textContent.replace('RM ', ''));
                const grandTotal = subtotal + shippingCost;
                document.querySelector('.grand-total-amount').textContent = 'RM ' + grandTotal.toFixed(2);
            }

            // Call updateTotals to set the correct totals when the page loads
            updateTotals();
        });

        document.addEventListener('DOMContentLoaded', function () {
            // Restrict Card Holder Name to alphabet and spaces
            var cardHolderInput = document.getElementById('CardHolderName');
            cardHolderInput.addEventListener('input', function (e) {
                this.value = this.value.replace(/[^a-zA-Z\s]/g, '');
            });

            // Restrict Card Number to digits only
            var cardNumberInput = document.getElementById('CardNumber');
            cardNumberInput.addEventListener('input', function (e) {
                this.value = this.value.replace(/\D/g, '');
            });

            // Restrict CVV to digits only
            var cvvInput = document.getElementById('CVV');
            cvvInput.addEventListener('input', function (e) {
                this.value = this.value.replace(/\D/g, '');
            });

            // Phone Number formatting (existing code)
            var phoneInput = document.getElementById('phone');
            phoneInput.addEventListener('input', function (e) {
                var input = e.target;
                var inputValue = input.value;

                // Remove any non-digit characters and previously added hyphens
                var numericValue = inputValue.replace(/\D/g, '');

                // Add a hyphen after the first 3 digits (if more than 3 digits are entered)
                if (numericValue.length > 3) {
                    input.value = numericValue.slice(0, 3) + '-' + numericValue.slice(3);
                } else {
                    input.value = numericValue;
                }

                // Enforce maxlength (since pattern doesn't restrict character count)
                if (input.value.length > 12) { // Allowing for 11 digits plus the hyphen
                    input.value = input.value.slice(0, 12);
                }
            });

            // Expiry Date formatting (existing code)
            var expiryDateInput = document.getElementById('ExpiryDate');
            expiryDateInput.addEventListener('input', function (e) {
                var input = e.target;
                var inputValue = input.value.replace(/\D/g, ''); // Remove non-digit characters

                // Ensure the input is not longer than 4 digits
                if (inputValue.length > 4) {
                    inputValue = inputValue.slice(0, 4);
                }

                // Add slash after 2 digits if more than 2 digits are entered
                var formattedInputValue = inputValue;
                if (inputValue.length > 2) {
                    formattedInputValue = inputValue.slice(0, 2) + '/' + inputValue.slice(2);
                }

                input.value = formattedInputValue;
            });
        });
    </script>
}



<style>
    .order-summary {
        background-color: #f8f9fa;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        margin-top: 20px;
        width: 600px;
    }

        .order-summary h3 {
            margin-bottom: 15px;
        }

        .order-summary table {
            margin-bottom: 20px;
        }

    .btn-block {
        margin-top: 10px;
    }

    .bag-summary {
        border-top: 1px solid #dee2e6;
        padding-top: 15px;
    }

    .badge {
        background-color: #777;
        color: white;
        padding: 0.5em 0.75em;
    }

    .bag-item {
        display: flex;
        margin-bottom: 10px;
        align-items: center;
        position: relative;
        column-gap: 10px;
    }

    .bag-item-image {
        flex-shrink: 0;
        margin-right: 15px; /* This creates the gap between the image and the details */
        width: 100px; /* Adjust as necessary */
        height: 100px; /* Adjust as necessary */
    }

    .bag-item-detail {
        flex-grow: 1;
    }

    .bag-item-name {
        font-weight: bold;
        margin-bottom: 5px;
    }

    .bag-item-price .original-price {
        text-decoration: line-through;
        margin-right: 10px;
    }


    .bag-item-quantity {
        font-size: 0.875em;
        color: #555;
    }

    .form-group {
        margin-bottom: 1rem;
    }

    label {
        display: block;
        margin-bottom: 0.5rem;
    }

    input[type="text"],
    input[type="email"],
    input[type="tel"],
    input[type="password"],
    textarea {
        width: 680px;
        padding: 0.375rem 0.75rem;
        margin-bottom: 1rem;
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
    }

    textarea {
        resize: vertical;
        height: 100px;
        width: 680px;
    }

    .btn-primary {
        color: #fff;
        background-color: #007bff;
        border-color: #007bff;
        padding: 0.5rem 1rem;
        font-size: 1rem;
        line-height: 1.5;
        border-radius: 0.25rem;
        transition: color 0.15s ease-in-out, background-color 0.15s ease-in-out, border-color 0.15s ease-in-out, box-shadow 0.15s ease-in-out;
    }

        .btn-primary:hover {
            color: #fff;
            background-color: #62af7a;
            border-color: #0062cc;
        }

    .btn-info {
        color: #fff;
        background-color: #62af7a;
        border-radius: 10px;
    }

        .btn-info:hover {
            color: #fff;
            background-color: darkolivegreen;
            border-radius: 10px;
        }


    .btn-primary:focus,
    .btn-primary.focus {
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, 0.25);
    }

    .btn-block {
        display: block;
        width: 100%;
    }

    .bag-summary-actions {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 1rem;
    }

    .btn-secondary {
        color: #fff;
        background-color: #6c757d;
        border-color: #6c757d;
    }

        .btn-secondary:hover {
            color: #fff;
            background-color: #5a6268;
            border-color: #545b62;
        }

    .icon-button {
        border: none;
        background: none;
        cursor: pointer;
        padding: 0;
        margin: 0 5px;
        position: absolute;
        top: 50%; /* Center vertically relative to the parent bag-item */
        right: 0; /* Align to the right side of the bag-item */
        transform: translateY(-50%); /* This will ensure it's centered vertically */
    }

        .icon-button i {
            color: slategrey;
            font-size: 1.2rem;
        }

        .icon-button:hover i {
            color: darkslategrey;
        }

</style>