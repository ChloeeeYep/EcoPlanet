@{
    ViewData["Title"] = "Index";
    int counter = 1; // Start the counter at 1
}
@model TrashpediaViewModel
<br></br>
<br></br>
<div class="header-container">
    <h1>Trashpedia</h1>
    <a href="@Url.Action("AddData", "Trashpedia")" class="action-button add">Add New Trashpedia</a>
</div>

<hr />
<div class="search-container">
    <input type="text" id="searchTrashpediaInput" onkeyup="searchTrashpedia()" placeholder="Search for trashpedia..." title="Type in a detail">
</div>

<div class="table-container">
    <table id="TrashpediaTable">
        <thead>
            <tr>
                <th>No.</th>
                <th>Trashpedia Name</th>
                <th>Images</th>
                <th>Materials</th>
                <th>Actions</th>
                <th>Alternatives</th>
                <th>Created/Updated At</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model.TrashpediaList)
            {
                <tr>
                    <td>@counter</td>
                    <td>@item.Name</td>
                    <td>
                        @if (!string.IsNullOrEmpty(item.Images))
                        {
                            var image = Model.ImageList.FirstOrDefault(i => i.Key.Trim() == item.Images.Trim());


                            if (image != null)
                            {
                                string imageURL = "https://" + image.BucketName + ".s3.amazonaws.com/" + image.Key;
                                <img src="@imageURL" style="max-width: 100px; max-height: 100px;" />

                            }
                            else
                            {
                                <span>No Image Found for Key: @item.Images</span>
                            }
                        }
                        else
                        {
                            <span>No Image Provided</span>
                        }
                    </td>
                    <td class="wrap-text">@item.Materials</td>
                    <td class="wrap-text">@item.Actions</td>
                    <td class="wrap-text">@item.Alternatives</td>
                    <td>@item.CreatedAt</td>
                    <td>
                        <a href="@Url.Action("EditData", "Trashpedia", new { Id = item.Id })" class="action-button edit">Edit</a>
                        <a href="@Url.Action("DeleteData", "Trashpedia", new { Id = item.Id })" class="action-button delete" onclick="return confirm('Are you sure you want to delete this trashpedia?');">Delete</a>
                    </td>
                </tr>
                counter++;
            }
        </tbody>
    </table>
</div>

<script>
    function searchTrashpedia() {
        var input, filter, table, tr, td, i, txtValue;
        input = document.getElementById("searchTrashpediaInput");
        filter = input.value.toUpperCase();
        table = document.getElementById("TrashpediaTable"); // You need to add this ID to your table
        tr = table.getElementsByTagName("tr");

        // Loop through all table rows, and hide those who don't match the search query
        for (i = 1; i < tr.length; i++) {
            tr[i].style.display = "none"; // Start by hiding all rows
            td = tr[i].getElementsByTagName("td");
            for (var j = 0; j < td.length; j++) {
                if (td[j]) {
                    txtValue = td[j].textContent || td[j].innerText;
                    if (txtValue.toUpperCase().indexOf(filter) > -1) {
                        tr[i].style.display = ""; // Show the row if there's a match
                        break;
                    }
                }
            }
        }
    }
</script>

<style>
    header {
        position: fixed;
        width: 100%;
        z-index:1000;
    }
    .header-container {
        display: flex;
        justify-content: space-between; /* Aligns children to opposite ends */
        align-items: center; /* Centers children vertically */
        margin-bottom: 20px; /* Adds some space below the header */
    }

    h1 {
        margin: 0; /* Removes default margin to align properly with the button */
        flex-grow: 1; /* Allows the title to grow and push the button to the right */
    }

    .table-container {
        margin: 0 auto;
        overflow-x: auto;
    }

    table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    th{
        background-color: #f8f9fa;
        text-align: center;
        padding: 10px;
        font-size: 14px;
        border-bottom: 1px solid #dee2e6;
        vertical-align: middle; /* Add this line to vertically center the content */
    }

    td {
        text-align: center;
        padding: 10px;
        font-size: 14px;
        border-bottom: 1px solid #dee2e6;
        vertical-align: middle; /* Add this line to vertically center the content */
    }


    .td img {
        display: block; /* Make sure the image is block level to respect max-width/height */
        margin: 0 auto; /* Center the image in the cell */
    }

    .action-buttons {
        display: flex;
        justify-content: center; /* Center the buttons horizontally */
        align-items: center;
        gap: 10px; /* Adjust the space between buttons */
        margin: 0;
    }

    .action-button {
        display: inline-flex;
        justify-content: center;
        align-items: center;
        margin: 0;
        padding: 8px 16px; /* Providing a bit more horizontal padding for aesthetics */
        border-radius: 4px;
        color: #fff;
        text-align: center;
        text-decoration: none;
        cursor: pointer;
        flex: 0 0 auto;
    }

    .action-button:hover {
        color: white; /* Text color changes to white on hover */
    }

    /* Styling for Add button */
    .add {
        background-color: #17a2b8;
    }

    .add:hover, .add:focus {
        background-color: #138496;
    }

    /* Styling for Edit button */
    .edit {
        background-color: #ffc107;
    }

    .edit:hover, .edit:focus {
        background-color: #e0a800;
    }

    /* Styling for Delete button */
    .delete {
        background-color: #dc3545;
    }

    .delete:hover, .delete:focus {
        background-color: #c82333;
    }

    .wrap-text {
        word-wrap: break-word; /* Allow long words to be able to break and wrap onto the next line */
        max-width: 200px; /* Set a max-width to the content, adjust as needed */
        text-align: left;
    }

    .actions-buttons-container {
        display: flex;
        flex-wrap: nowrap; /* Prevent buttons from wrapping */
        justify-content: center;
        gap: 10px;
    }

    .action-button {
        white-space: nowrap; /* Prevent text in buttons from wrapping */
    }

    .search-container {
        display: flex;
        justify-content: center; /* Center the search box */
        width: 100%;
        padding: 10px 0;
    }

    #searchTrashpediaInput {
        width: 300px; /* Set the width as per your design */
        padding: 10px;
        margin: 10px 0; /* Add some margin at the top and bottom */
        border: 1px solid #ccc;
        border-radius: 4px;
    }
</style>
